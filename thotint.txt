a) To create nodes for the given examples in Neo4j:

```cypher
CREATE (p:Patient {
    Id: '19801014548084',
    FirstName: 'Jack',
    LastName: 'Sparrow',
    Age: 42
})

CREATE (pharmacy:Pharmacy {
    Name: 'Bloem Central Pharmacy',
    Telephone: '0514013215',
    City: 'Bloemfontein'
})

CREATE (medication:Medication {
    Name: 'IbuProfen Max',
    Type: 'Analgesic',
    Strength: '20mg',
    Schedule: 2
})
```

b) To create a relationship "PURCHASED" between Jack Sparrow and IbuProfen Max:

```cypher
MATCH (p:Patient { FirstName: 'Jack', LastName: 'Sparrow' }), 
      (m:Medication { Name: 'IbuProfen Max' })
CREATE (p)-[:PURCHASED]->(m)
```

c) To find all the patients who bought IbuProfen Max:

```cypher
MATCH (p:Patient)-[:PURCHASED]->(m:Medication { Name: 'IbuProfen Max' })
RETURN p
```

d) To find all the medication names that have a schedule higher than 2:

```cypher
MATCH (m:Medication)
WHERE m.Schedule > 2
RETURN m.Name
```

e) To find all the pharmacies in Bloemfontein that supply IbuProfen Max:

```cypher
MATCH (pharmacy:Pharmacy { City: 'Bloemfontein' })-[:SUPPLIES]->(m:Medication { Name: 'IbuProfen Max' })
RETURN pharmacy
```

a) To create a node for each of the examples given, you can use the following Neo4j commands:

```cypher
CREATE (:Patient {
  Id: 19801014548084,
  FirstName: "Jack",
  LastName: "Sparrow",
  Age: 42
})

CREATE (:Pharmacy {
  Name: "Bloem Central Pharmacy",
  Telephone: 0514013215,
  City: "Bloemfontein"
})

CREATE (:Medication {
  Name: "IbuProfen Max",
  Type: "Analgesic",
  Strength: "20mg",
  Schedule: 2
})
```

b) To create a relationship "PURCHASED" between Jack Sparrow and IbuProfen Max, you can use the following command:

```cypher
MATCH (p:Patient {FirstName: "Jack", LastName: "Sparrow"})
MATCH (m:Medication {Name: "IbuProfen Max"})
CREATE (p)-[:PURCHASED]->(m)
```

c) To find all the patients who bought IbuProfen Max, you can use the following command:

```cypher
MATCH (p:Patient)-[:PURCHASED]->(m:Medication {Name: "IbuProfen Max"})
RETURN p
```

d) To find all the medication names with a schedule higher than 2, you can use the following command:

```cypher
MATCH (m:Medication)
WHERE m.Schedule > 2
RETURN m.Name
```

e) To find all pharmacies in Bloemfontein that supply IbuProfen Max, you can use the following command:

```cypher
MATCH (p:Pharmacy {City: "Bloemfontein"})-[:SUPPLIES]->(m:Medication {Name: "IbuProfen Max"})
RETURN p
```

You would need to create a relationship, such as "SUPPLIES," between pharmacies and medications to represent the supply relationship.
1.	Visualization of the graph in Neo4j
// Create Readers
CREATE (reader1:Reader {name: "John", surname: "Doe"})
CREATE (reader2:Reader {name: "Alice", surname: "Smith"})
CREATE (reader3:Reader {name: "Bob", surname: "Johnson"})
CREATE (reader4:Reader {name: "Emily", surname: "Brown"})
CREATE (reader5:Reader {name: "David", surname: "Wilson"})

// Create Books
CREATE (book1:Book {title: "Book A", genre: "Fiction", pages: 300, publicationYear: 2010})
CREATE (book2:Book {title: "Book B", genre: "Mystery", pages: 450, publicationYear: 2017})
CREATE (book3:Book {title: "Book C", genre: "Science Fiction", pages: 1200, publicationYear: 2020})
CREATE (book4:Book {title: "Book D", genre: "Romance", pages: 600, publicationYear: 2018})
CREATE (book5:Book {title: "Book E", genre: "Fantasy", pages: 800, publicationYear: 2022})

// Create Relationships
CREATE (reader1)-[:READING]->(book2)
CREATE (reader1)-[:READ]->(book1)
CREATE (reader2)-[:WANT_TO_READ]->(book4)
CREATE (reader3)-[:READ]->(book2)
CREATE (reader4)-[:WANT_TO_READ]->(book5)
CREATE (book2)-[:SEQUEL_TO]->(book1)
CREATE (book4)-[:SEQUEL_TO]->(book3)
CREATE (book5)-[:SEQUEL_TO]->(book2)  

      
     

2.	Find all books published after 2015 with their title and genre:
MATCH (b:Book)
WHERE b.publicationYear > 2015
RETURN b.title, b.genre
3.	Count the number of books that have more than 1000 pages:
MATCH (b:Book)
WHERE b.pages > 1000
RETURN count(b) AS numberOfBooks 
4. List the titles of the books a specific reader (e.g., John Doe)
MATCH (reader:Reader {name: "John", surname: "Doe"})-[:WANT_TO_READ]->(book:Book)
RETURN book.title
5. Show the sequel of a specific book (e.g., "Book A"):
MATCH (book1:Book {title: "Book A"})-[:SEQUEL_TO]->(sequel:Book)
RETURN sequel.title)
Scenario B
Queries

1. Visualization of the graph in Neo4j:
// Create Games
CREATE (game1:Game {name: "Game X", genre: "Action", players: 2, platform: "PC"})
CREATE (game2:Game {name: "Game Y", genre: "Adventure", players: 1, platform: "PlayStation"})
CREATE (game3:Game {name: "Game Z", genre: "Strategy", players: 4, platform: "Switch"})
CREATE (game4:Game {name: "Game A", genre: "RPG", players: 1, platform: "PC"})
CREATE (game5:Game {name: "Game B", genre: "Sports", players: 2, platform: "PlayStation"})

// Create Players
CREATE (player1:Player {profileName: "Player1", profilePic: "pic1"})
CREATE (player2:Player {profileName: "Player2", profilePic: "pic2"})
CREATE (player3:Player {profileName: "Player3", profilePic: "pic3"})
CREATE (player4:Player {profileName: "Player4", profilePic: "pic4"})
CREATE (player5:Player {profileName: "Player5", profilePic: "pic5"})

// Create Relationships
CREATE (player1)-[:PLAYING]->(game1)
CREATE (player2)-[:PLAYED]->(game2)
CREATE (player3)-[:WANT_TO_PLAY]->(game3)
CREATE (player4)-[:PLAYED]->(game1)
CREATE (player5)-[:PLAYING]->(game4)

CREATE (player1)-[:FRIEND]->(player2)
CREATE (player1)-[:FRIEND]->(player3)
CREATE (player2)-[:FRIEND]->(player4)
CREATE (player3)-[:FRIEND]->(player5)
CREATE (player4)-[:FRIEND]->(player5)

     
     
2.  Show all games belonging to a specific genre (e.g., "Action")
MATCH (game:Game {genre: "Action"})
RETURN game.name
3.  Show all games belonging to a specific genre and platform (e.g., "Adventure" on "PlayStation"):
MATCH (game:Game {genre: "Adventure", platform: "PlayStation"})
RETURN game.name
4. For a specific player (e.g., "Player1"), show all the games that player is currently playing:
MATCH (player:Player {profileName: "Player1"})-[:PLAYING]->(game:Game)
RETURN game.name 
5. For a specific player (e.g., "Player1"), show the names of all that player's friends:
MATCH (player:Player {profileName: "Player1"})-[:FRIEND]->(friend:Player)
RETURN friend.profileName


In HBase, you can perform operations using the HBase shell. Here are the commands for the requested actions:

a) To insert the data for John Lennon into the "musician" table:

```shell
put 'musician', 'JohnLennon', 'personal_info:name', 'John Lennon'
put 'musician', 'JohnLennon', 'personal_info:age', '80'
put 'musician', 'JohnLennon', 'music_info:band', 'The Beatles'
put 'musician', 'JohnLennon', 'music_info:instrument', 'Guitar'
```

In the above commands, 'JohnLennon' is used as the row key for John Lennon's data. You can customize the column family and qualifier names to suit your schema.

b) To determine how many rows there are in the "musician" table:

```shell
count 'musician'
```

This command will provide the count of rows in the "musician" table.

c) To retrieve the data for John Lennon:

```shell
get 'musician', 'JohnLennon'
```

This command will fetch all the data associated with the row key 'JohnLennon' in the "musician" table.

d) To retrieve all data in the "musician" table:

```shell
scan 'musician'
```

This command will scan and retrieve all the data from the "musician" table, displaying all rows and their associated data.
In HBase, you can interact with the database using HBase shell commands. Below are the commands for the given tasks:

a) To insert the data for John Lennon into the "musician" table:

```shell
put 'musician', 'JohnLennon', 'details:firstName', 'John'
put 'musician', 'JohnLennon', 'details:lastName', 'Lennon'
put 'musician', 'JohnLennon', 'details:instrument', 'Guitar'
put 'musician', 'JohnLennon', 'details:band', 'The Beatles'
```

This will create a row with the row key 'JohnLennon' in the 'musician' table and populate it with the details of John Lennon.

b) To determine how many rows there are in the "musician" table:

```shell
count 'musician'
```

This command will provide the count of rows in the "musician" table.

c) To retrieve the data for John Lennon:

```shell
get 'musician', 'JohnLennon'
```

This command will fetch and display the details of John Lennon stored in the "musician" table.

d) To retrieve all data in the "musician" table:

```shell
scan 'musician'
```

This command will scan and display all the rows and their data in the "musician" table.

Additional commands you can use in HBase:

- To delete a row for John Lennon:

```shell
delete 'musician', 'JohnLennon'
```

- To retrieve specific column family or qualifier data for John Lennon:

```shell
get 'musician', 'JohnLennon', {COLUMN => 'details:instrument'}
```

- To update a specific column value for John Lennon:

```shell
put 'musician', 'JohnLennon', 'details:band', 'John Lennon and The Plastic Ono Band'
```

- To scan with additional options, such as limiting the number of rows returned:

```shell
scan 'musician', {LIMIT => 10}
```

These are some of the basic HBase commands for data insertion, retrieval, and manipulation. You can adapt and use them according to your specific use case.
put 'emp','1','personal data:name','raju'
put 'emp','1','personal data:city','hyderabad'
put 'emp','1','professionaldata:designation','manager'
put 'emp','1','professional data:salary','50000'

